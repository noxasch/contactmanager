{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","Provider","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","contacts","dispatch","action","setState","console","log","type","objectSpread","filter","contact","id","payload","toConsumableArray","map","reducer","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","res","wrap","_context","prev","next","axios","get","sent","data","stop","react_default","createElement","props","children","Component","Consumer","Contact","showContactInfo","e","delete","status","_this2","_this$props","name","email","phone","display","className","onClick","onShowClick","bind","style","cursor","float","color","onDeleteClick","Link","to","marginRight","Contacts","Fragment","contacts_Contact","TextInputGroup","_ref","label","placeholder","onChange","error","htmlFor","defaultProps","AddContact","signal","CancelToken","source","errors","cancel","defineProperty","target","preventDefault","newContact","errorObj","trim","post","history","push","onSubmit","keys","layout_TextInputGroup","replace","c","toUpperCase","EditContact","match","params","updateContact","put","clearState","Header","branding","NavLink","exact","About","NotFound","Test","title","body","fetch","then","response","json","_this$state","App","context_Provider","HashRouter","layout_Header","Switch","Route","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d814a95.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n// Application State Provider or Storage\n\nconst Context = React.createContext();\n\nfunction reducer(state, action) {\n  // the state is from Provider property\n  // as we are actually calling it using this.setState((state) => reducer(state, action))\n  console.log(state);\n  switch (action.type) {\n    case 'DELETE_CONTACT':\n      return {\n        ...state,\n        contacts: state.contacts.filter((contact) => contact.id !== action.payload)\n      };\n    case 'ADD_CONTACT':\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts]\n      };\n    case 'UPDATE_CONTACT':\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) => \n            contact.id === action.payload.id ? (contact = action.payload) : contact\n        )\n      };\n    default:\n      return state;\n  }\n}\n\nexport class Provider extends Component {\n  // this is where we gonna have our state\n  state = {\n    // in this example we just gonna have an array object\n    // but it can be anything from a database or backend\n    // this is just dummy or test data\n    contacts: [\n      // replaced with jsonplaceholderapi\n    ],\n\n    dispatch: (action) => {\n      this.setState((state) => reducer(state, action))\n    }\n  }\n\n  async componentDidMount(){\n    // using axios\n    const res = await axios.get('https://jsonplaceholder.typicode.com/users');\n    this.setState({contacts: res.data});\n  }\n\n  render() {\n    // we pass in what we want to be available troughout our app\n    // in a property named value\n    // so the state provider is available from any other Components\n    // the value will be available to the Consumer\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}{/* what this do ? */}\n      </Context.Provider>\n    )\n  }\n  \n}\n\nexport const Consumer = Context.Consumer;\n// <Consumer >\n// can also pass the context\n// export const Context = Context;\n// then you'll use it like this\n// <Context.Consumer>\n// export default Provider;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Consumer } from '../../context';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\nclass Contact extends Component {\n  state = {\n    showContactInfo: false\n  };\n \n  onShowClick(e) {\n    this.setState({ showContactInfo: !this.state.showContactInfo}); \n  };\n\n  async onDeleteClick(id, dispatch) {\n    console.log('clicked');\n\n    const res = await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\n\n    res.status === 200 && dispatch({type: 'DELETE_CONTACT', payload: id});\n  }\n\n  // async arrow function \n  /* \n  onDeleteClick = async (id, dispatch) => {\n    ...\n  }\n  */\n\n  render() {\n    // destructring the props\n    const {id, name, email, phone} = this.props;\n    const { showContactInfo } = this.state\n    let display = {\n      display: showContactInfo ? 'block':'none'\n    }\n    // console.log(this.props);\n    // console.log(this);\n\n    return (\n      <Consumer>\n        {(value) => {\n          const { dispatch } = value;\n          return(\n            <div className=\"card card-body mb-3\">\n            <h4>{name} \n              <i onClick={this.onShowClick.bind(this, id)} className=\"fas fa-sort-down\" style={{cursor: 'pointer'}}></i>\n              <i className=\"fas fa-times\" style={{cursor: 'pointer', float: 'right', color: 'red'}} onClick={this.onDeleteClick.bind(this, id, dispatch)}></i>\n              <Link to={`contact/edit/${id}`}>\n                <i className=\"fas fa-pencil-alt\" \n                style={{\n                  // this should be in css in js property\n                  cursor: 'pointer',\n                  float: 'right',\n                  color: 'black',\n                  marginRight: '1rem'\n\n                }}></i>\n              </Link>\n            </h4>\n            <ul className=\"list-group\" style={display}>\n              <li className=\"list-group-item\">Email: {email}</li>\n              <li className=\"list-group-item\">Phone: {phone}</li>\n            </ul>\n          </div>\n          )\n        }}\n      </Consumer>\n    )\n  };\n}\n\nContact.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n};\n\n\nexport default Contact;\n\n\n","// this is a class component because it gonna have state\nimport React, { Component } from 'react';\n// import contact component - the singular\nimport Contact from './Contact'\n// import the Consumer from context\nimport { Consumer } from '../../context';\n\nclass Contacts extends Component {\n\n\n  render() {\n    return(\n      // we can access the value props that we pass in Context.Provider\n      // Component in the App.js\n      <Consumer>\n        { value => {\n          // destructuring the state\n          const { contacts } = value;\n          return (\n            // <React.Fragment> because we don't want to enclosed it in any element\n            <React.Fragment>\n              <h1 className=\"display-4 mb-2\">\n              <span className=\"text-primary\">Contact</span>List\n              </h1>\n              { contacts.map(contact => (\n                <Contact \n                  key = {contact.id} \n                  // key is a unique key for map and not pass as a props hmmm\n                  id = {contact.id}\n                  name = {contact.name}\n                  email = {contact.email}\n                  phone = {contact.phone}\n                />\n              )) }\n            </React.Fragment>\n          )\n        }}\n      </Consumer>\n    )\n  };\n}\n\nexport default Contacts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\n// this is just a stateless component\nconst TextInputGroup = ({name, type, label, value, placeholder, onChange, error}) => {\n  // const {name, type, label, value, placeholder, onChange} = props;\n\n  return(\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}:</label>\n      <input \n        name={name}\n        type={type !== null ? type : 'text'}\n        value={value} \n        onChange={onChange} \n        className={`${ error ? 'is-invalid' : ''} form-control form-control-lg` }\n        placeholder={placeholder}  \n      />\n      {\n        // if error is true, it will take the second value\n        // if false, react will ignore it\n        // refs: https://reactjs.org/docs/conditional-rendering.html#inline-if-with-logical--operator\n        error && <div className=\"invalid-feedback\">{label} is required</div> \n        // equivalent to\n        // error ? <div className=\"invalid-feedback\">{label} is required</div> : ''\n      }\n    </div>\n  )\n}\n\nTextInputGroup.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n}\n\nTextInputGroup.defaultProps = {\n  type: 'text'\n}\n\nexport default TextInputGroup;","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios';\n// now we are using uuid library from npm to generate uuid\n// import uuid from 'uuid';\n\n// Controlled Component with onchange\n\nclass AddContact extends Component {\n  signal = axios.CancelToken.source();\n\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {\n\n    }\n  }\n\n  componentWillUnmount() {\n    this.signal.cancel('Api is being canceled');\n  }\n\n  // handling input\n  // because we are changing state of the Components\n  // when using Redux it will be different\n  onChange(e) {\n    this.setState({\n      // this will take name from of the input\n      // and the then value input\n      // and set to appropriate state according to the name\n      [e.target.name]: e.target.value\n    })\n  }\n\n  // handling submit event\n  // so if we are passing parameters with the event, \n  // event should be the last params\n  async onSubmit(value, e) {\n    e.preventDefault();\n\n    const { name, email, phone, errors } = this.state;\n    const { dispatch } = value;\n\n    const newContact = {\n      name, \n      email,\n      phone\n    };\n\n    let errorObj = {...errors, name: false, email: false, phone: false};\n\n    // check for errors\n    // form validation\n    if (!name.trim()){\n      errorObj = {...errorObj, name: true};\n    }\n\n    if (!email.trim()){\n      errorObj = {...errorObj, email: true};\n    }\n\n    if (!phone.trim()){\n      errorObj = {...errorObj, phone: true};\n    }\n    this.setState({errors: errorObj});\n\n    // redirect should be after all the state has been change or check \n    // otherwise it can cause memory leak warning\n    if (name.trim() && email.trim() && phone.trim()) {\n      const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact);\n      // 201 is created\n      if(res.status === 201){\n        dispatch({type: 'ADD_CONTACT', payload: res.data });\n        this.props.history.push('/');\n      }\n    }\n\n  }\n\n  clearState() {\n    // clear input and clear error message\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {}\n    });\n  }\n\n  render() {\n    // const { name, email, phone, errors } = this.state;\n    const { errors } = this.state;\n    // so to use anything from the context, we must declare it as consumer\n    // so that we can access anything inside the context such as state\n    // consumer take the props passed by Provider\n    return (\n      <Consumer>\n        {\n          value => { // js in jsx should be in curly braces {}\n            // const { dispatch } = value; // this is from the context state\n            return (\n              // when we bind value to  a state\n              // the input field is unmutable\n              // to change this behavior we must bind it to onchange event\n              <div className=\"card mb-3\">\n              <div className=\"card-header\">Add Contact</div>\n              <div className=\"card-body\">\n                {/* using onSubmit() handler */}\n                <form onSubmit={this.onSubmit.bind(this, value)}>\n                  { // we can also call it in more simpler form like this\n                    // this is much more efficient because we iterate only once\n                    Object.keys(this.state)\n                      .filter((key) => key!== 'errors')\n                      .map((key) => { // map the filtered object\n                          return (\n                            <TextInputGroup\n                              // When rendering an array of React elements, a key on each element is needed for React to know how to update each element.\n                              key={key} // React iterables should have this props\n                              label={key.replace(/\\w/,(c) => c.toUpperCase())}\n                              type={key === 'email' ? 'email' : 'text'}\n                              name={key}\n                              placeholder={`Enter ${key}...`}\n                              value={this.state[key]}\n                              onChange={this.onChange.bind(this)}\n                              error={errors[key]}\n                            />\n                          );\n                        }\n                      )\n                  }\n                  <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-primary btn-block\"/>\n                </form>\n              </div>\n            </div>\n            )\n          } \n        }\n      </Consumer>\n    );\n  }\n}\n\nexport default AddContact;","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios';\n// now we are using uuid library from npm to generate uuid\n// import uuid from 'uuid';\n\n// Controlled Component with onchange\n\nclass EditContact extends Component {\n  signal = axios.CancelToken.source();\n\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {\n\n    }\n  }\n\n  componentWillUnmount() {\n    this.signal.cancel('Api is being canceled');\n  }\n\n  async componentDidMount() {\n    // take the params from get url params\n    const { id } = this.props.match.params;\n    const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\n    const contact = res.data;\n    this.setState({\n      name: contact.name,\n      email: contact.email,\n      phone: contact.phone\n    })\n  }\n\n  // handling input\n  // because we are changing state of the Components\n  // when using Redux it will be different\n  onChange(e) {\n    this.setState({\n      // this will take name from of the input\n      // and the then value input\n      // and set to appropriate state according to the name\n      [e.target.name]: e.target.value\n    })\n  }\n\n  // handling submit event\n  // so if we are passing parameters with the event, \n  // event should be the last params\n  async onSubmit(value, e) {\n    e.preventDefault();\n\n    const { id } = this.props.match.params; \n    const { name, email, phone, errors } = this.state;\n    const { dispatch } = value;\n\n    const updateContact = {\n      id,\n      name, \n      email,\n      phone\n    };\n\n    let errorObj = {...errors, name: false, email: false, phone: false};\n\n    // check for errors\n    // form validation\n    if (!name.trim()){\n      errorObj = {...errorObj, name: true};\n    }\n\n    if (!email.trim()){\n      errorObj = {...errorObj, email: true};\n    }\n\n    if (!phone.trim()){\n      errorObj = {...errorObj, phone: true};\n    }\n    this.setState({errors: errorObj});\n\n    // redirect should be after all the state has been change or check \n    // otherwise it can cause memory leak warning\n    if (name.trim() && email.trim() && phone.trim()) {\n      const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updateContact);\n\n      if(res.status === 200){\n        dispatch({type: 'UPDATE_CONTACT', payload: res.data });\n        this.clearState();\n        this.props.history.push('/');\n      }\n    }\n\n  }\n\n  clearState() {\n    // clear input and clear error message\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {}\n    });\n  }\n\n  render() {\n    // const { name, email, phone, errors } = this.state;\n    const { errors } = this.state;\n    // so to use anything from the context, we must declare it as consumer\n    // so that we can access anything inside the context such as state\n    // consumer take the props passed by Provider\n    return (\n      <Consumer>\n        {\n          value => { // js in jsx should be in curly braces {}\n            // const { dispatch } = value; // this is from the context state\n            return (\n              // when we bind value to  a state\n              // the input field is unmutable\n              // to change this behavior we must bind it to onchange event\n              <div className=\"card mb-3\">\n              <div className=\"card-header\">Edit Contact</div>\n              <div className=\"card-body\">\n                {/* using onSubmit() handler */}\n                <form onSubmit={this.onSubmit.bind(this, value)}>\n                  { // we can also call it in more simpler form like this\n                    // this is much more efficient because we iterate only once\n                    Object.keys(this.state)\n                      .filter((key) => key!== 'errors')\n                      .map((key) => { // map the filtered object\n                          return (\n                            <TextInputGroup\n                              // When rendering an array of React elements, a key on each element is needed for React to know how to update each element.\n                              key={key} // React iterables should have this props\n                              label={key.replace(/\\w/,(c) => c.toUpperCase())}\n                              type={key === 'email' ? 'email' : 'text'}\n                              name={key}\n                              placeholder={`Enter ${key}...`}\n                              value={this.state[key]}\n                              onChange={this.onChange.bind(this)}\n                              error={errors[key]}\n                            />\n                          );\n                        }\n                      )\n                  }\n                  <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-primary btn-block\"/>\n                </form>\n              </div>\n            </div>\n            )\n          } \n        }\n      </Consumer>\n    );\n  }\n}\n\nexport default EditContact;","import React from 'react';\n// to check props type\nimport PropTypes from 'prop-types';\nimport { Link, NavLink } from 'react-router-dom';\n// active link will add \"active\" attributes to the className\n// when it is no the page\n\nconst Header = (props) => {\n  // destructuring the property\n  const { branding } = props;\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-3 py-0\">\n      <div className=\"container\">\n        <Link to=\"/\" className=\"navbar-brand\">{branding}</Link>\n        <div>\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              {/* <a href=\"/\" className=\"nav-link\">Home</a> */}\n              <NavLink exact to=\"/\" className=\"nav-link\">\n                <i className=\"fas fa-home\"></i>Home\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink to=\"/contact/add\" className=\"nav-link\">\n              <i className=\"fas fa-plus\"></i>Add\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink to=\"/about\" className=\"nav-link\">\n              <i className=\"fas fa-question\"></i>About\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\n// default props\n// default property if no value are passed in\nHeader.defaultProps = {\n  branding: 'My App'\n}\n\n// validate props data type\nHeader.propTypes = {\n  branding: PropTypes.string.isRequired\n};\n\nexport default Header;","import React from 'react'\n\nconst About = () => {\n  return (\n    <div>\n      <h1 className=\"display-4\">About Contact Manager</h1>\n      <p className=\"lead\">Simple app to manage contacts</p>\n      <p className=\"text-secondary\">Version 1.0.0</p>\n    </div>\n  );\n};\n\nexport default About","import React from 'react'\n\nconst NotFound = () => {\n  return (\n    <div>\n      <h1 className=\"display-4\">\n        <span className=\"text-danger\">404</span> Page Not Found\n      </h1>\n      <p className=\"lead\">Sorry, the page you requested does not exist.</p>\n    </div>\n  );\n};\n\nexport default NotFound;\n","import React, { Component } from 'react'\n\nclass Test extends Component {\n\n  state = {\n    title:'',\n    body:''\n  }\n\n  // run whenever the component mounted\n  componentDidMount(){\n    // use cases:\n    // this is where to make http call to api backend\n    // fetching data from backend\n    console.log('componentDidMount...');\n\n    // making http request using fetch API\n    fetch('https://jsonplaceholder.typicode.com/posts/1')\n    .then(response => response.json())\n    // .then(json => console.log(json));\n    .then(\n      data => this.setState({\n        title: data.title,\n        body: data.body\n      })\n    );\n  }\n\n  render() {\n    const { title, body } = this.state;\n\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{body}</p>\n      </div>\n    )\n  }\n}\n\nexport default Test;\n\n\n","import React, { Component } from 'react';\n// 3 things to import from react router\nimport { HashRouter as Router, Route, Switch  } from 'react-router-dom';\nimport './App.css';\n\nimport Contacts from './components/contacts/Contacts';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\n\nimport Test from './components/test/Test';\n\n\nimport { Provider } from './context';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router>\n          <div className=\"App\">\n            <Header branding=\"Contact Manager\" />\n            <div className=\"container\">\n              <Switch>\n                {/* this will route as the main page (address)  */}\n                <Route exact path=\"/\" component={Contacts} />\n                {/* this will route as localhost/contact/add  */}\n                <Route exact path=\"/contact/add\" component={AddContact} />\n\n                <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n                \n                {/* this will route as localhost/about  */}\n                <Route exact path=\"/about\" component={About} />\n                <Route exact path=\"/test\" component={Test} />\n                {/* Route withoud path will be treated as default redirect */}\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}